<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/tama/customer/MainApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/tama/customer/MainApplication.java" />
              <option name="originalContent" value="package com.tama.customer;&#10;&#10;import com.tama.customer.config.DatabaseConfig;&#10;import com.tama.customer.dao.DBConnectionManager;&#10;import com.tama.customer.model.Customer;&#10;import com.tama.customer.service.CustomerService;&#10;import com.tama.customer.service.ExportService;&#10;import com.tama.customer.service.ImportService;&#10;import com.tama.customer.view.CustomerDialog;&#10;import com.tama.customer.view.DatabaseConnectionView;&#10;import com.tama.customer.view.ProgressDialog;&#10;import javafx.application.Application;&#10;import javafx.application.Platform;&#10;import javafx.beans.binding.Bindings;&#10;import javafx.beans.property.SimpleBooleanProperty;&#10;import javafx.beans.property.SimpleObjectProperty;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.concurrent.Task;&#10;import javafx.geometry.Insets;&#10;import javafx.geometry.Orientation;&#10;import javafx.geometry.Pos;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.KeyCode;&#10;import javafx.scene.input.KeyCombination;&#10;import javafx.scene.layout.BorderPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.layout.VBox;&#10;import javafx.stage.FileChooser;&#10;import javafx.stage.Stage;&#10;&#10;import java.io.File;&#10;import java.math.BigDecimal;&#10;import java.sql.SQLException;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.util.function.BiFunction;&#10;&#10;public class MainApplication extends Application {&#10;    private CustomerService customerService;&#10;    private Stage primaryStage;&#10;    private TableView&lt;Customer&gt; tableView;&#10;    private Label statusLabel;&#10;    private Label totalRecordsLabel;&#10;    private TextField searchField;  // Add this field at class level&#10;&#10;    private Pagination pagination;&#10;    private ComboBox&lt;Integer&gt; recordLimitComboBox;&#10;    private final int[] RECORD_LIMITS = {1, 5, 10, 25, 50, 100};&#10;    private int currentPage = 0;&#10;    private ObservableList&lt;Customer&gt; masterData = FXCollections.observableArrayList();&#10;    private Label pageNumberLabel;&#10;&#10;    private Button firstPageButton;&#10;    private Button prevPageButton;&#10;    private Button nextPageButton;&#10;    private Button lastPageButton;&#10;&#10;    @Override&#10;    public void start(Stage stage) {&#10;        this.primaryStage = stage;&#10;        customerService = new CustomerService();&#10;&#10;        // Create an initial empty scene to ensure proper initialization&#10;        Scene initialScene = new Scene(new javafx.scene.layout.StackPane(), 1, 1);&#10;        stage.setScene(initialScene);&#10;&#10;        // Show database connection dialog&#10;        DatabaseConnectionView dbView = new DatabaseConnectionView(null); // Set owner to null&#10;        dbView.setOnShowing(event -&gt; {&#10;            Stage dbStage = (Stage) dbView.getDialogPane().getScene().getWindow();&#10;            dbStage.centerOnScreen();&#10;        });&#10;&#10;        dbView.showAndWait().ifPresent(success -&gt; {&#10;            if (success) {&#10;                showMainWindow();&#10;            } else {&#10;                System.exit(0);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showMainWindow() {&#10;        BorderPane root = new BorderPane();&#10;        MenuBar menuBar = createMenuBar();&#10;        root.setTop(menuBar);&#10;&#10;        // Create search box and table container&#10;        VBox centerBox = new VBox(10);&#10;        centerBox.setPadding(new Insets(10));&#10;&#10;        // Add search box&#10;        HBox searchBox = new HBox(10);&#10;        searchBox.getStyleClass().add(&quot;search-box&quot;);&#10;        searchField = new TextField();&#10;        searchField.setPromptText(&quot;Search by NIK or Name&quot;);&#10;        searchField.setPrefWidth(300);&#10;        Button searchButton = new Button(&quot;Search&quot;);&#10;        searchBox.getChildren().addAll(new Label(&quot;Search:&quot;), searchField, searchButton);&#10;&#10;        // Create table&#10;        tableView = createTableView();&#10;&#10;        // Create pagination controls&#10;        HBox paginationControls = createPaginationControls();&#10;&#10;        centerBox.getChildren().addAll(searchBox, tableView, paginationControls);&#10;        root.setCenter(centerBox);&#10;&#10;        // Add search functionality&#10;        searchButton.setOnAction(e -&gt; {&#10;            try {&#10;                ObservableList&lt;Customer&gt; searchResults = customerService.searchCustomers(searchField.getText());&#10;                tableView.setItems(searchResults);&#10;                updateStatus();&#10;            } catch (SQLException ex) {&#10;                showError(&quot;Search Error&quot;, &quot;Failed to search customers: &quot; + ex.getMessage());&#10;            }&#10;        });&#10;&#10;        // Add enter key handler for search&#10;        searchField.setOnKeyPressed(e -&gt; {&#10;            if (e.getCode() == KeyCode.ENTER) {&#10;                searchButton.fire();&#10;            }&#10;        });&#10;&#10;        // Create status bar&#10;        HBox statusBar = createStatusBar();&#10;        root.setBottom(statusBar);&#10;&#10;        Scene scene = new Scene(root, 800, 600);&#10;        scene.getStylesheets().add(getClass().getResource(&quot;styles.css&quot;).toExternalForm());&#10;&#10;        // Setup keyboard shortcuts&#10;        setupKeyboardShortcuts(scene);&#10;&#10;        primaryStage.setTitle(&quot;Customer Management System&quot;);&#10;        primaryStage.setScene(scene);&#10;        primaryStage.show();&#10;&#10;        // Load initial data&#10;        refreshData();&#10;        updateStatus();&#10;&#10;        primaryStage.setOnCloseRequest(event -&gt; {&#10;            event.consume(); // Prevent default close operation&#10;            closeApplication();&#10;        });&#10;    }&#10;&#10;    private void closeApplication() {&#10;        Alert confirmation = new Alert(Alert.AlertType.CONFIRMATION);&#10;        confirmation.setTitle(&quot;Exit Application&quot;);&#10;        confirmation.setHeaderText(&quot;Are you sure you want to exit?&quot;);&#10;        confirmation.setContentText(&quot;Any unsaved changes will be lost.&quot;);&#10;&#10;        if (confirmation.showAndWait().orElse(ButtonType.CANCEL) == ButtonType.OK) {&#10;            // Close database connection&#10;            DBConnectionManager.getInstance().closeConnection();&#10;            Platform.exit();&#10;        }&#10;    }&#10;&#10;    private MenuBar createMenuBar() {&#10;        MenuBar menuBar = new MenuBar();&#10;&#10;        // Connect Menu&#10;        Menu connectMenu = new Menu(&quot;Connect&quot;);&#10;        MenuItem openConnection = new MenuItem(&quot;Open Connection&quot;);&#10;        MenuItem closeConnection = new MenuItem(&quot;Close Connection&quot;);&#10;        connectMenu.getItems().addAll(openConnection, closeConnection);&#10;&#10;        // Data Menu&#10;        Menu dataMenu = new Menu(&quot;Data&quot;);&#10;        MenuItem addData = new MenuItem(&quot;Add Data&quot;);&#10;        addData.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+N&quot;));&#10;        MenuItem editData = new MenuItem(&quot;Edit Selected&quot;);&#10;        editData.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+E&quot;));&#10;        MenuItem deleteData = new MenuItem(&quot;Delete Selected&quot;);&#10;        deleteData.setAccelerator(KeyCombination.keyCombination(&quot;Delete&quot;));&#10;        MenuItem refreshTable = new MenuItem(&quot;Refresh Data&quot;);&#10;        refreshTable.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+R&quot;));&#10;        dataMenu.getItems().addAll(addData, editData, deleteData, new SeparatorMenuItem(), refreshTable);&#10;&#10;        // View Menu&#10;        Menu viewMenu = new Menu(&quot;View&quot;);&#10;        MenuItem search = new MenuItem(&quot;Search&quot;);&#10;        search.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+F&quot;));&#10;        MenuItem clearSearch = new MenuItem(&quot;Clear Search&quot;);&#10;        MenuItem showActive = new MenuItem(&quot;Show Active Only&quot;);&#10;        MenuItem showInactive = new MenuItem(&quot;Show Inactive Only&quot;);&#10;        MenuItem showAll = new MenuItem(&quot;Show All&quot;);&#10;        viewMenu.getItems().addAll(search, clearSearch, new SeparatorMenuItem(),&#10;                                 showActive, showInactive, showAll);&#10;&#10;        // Export/Import Menu&#10;        Menu exportMenu = new Menu(&quot;Export&quot;);&#10;        MenuItem exportPDF = new MenuItem(&quot;Export to PDF&quot;);&#10;        exportPDF.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+P&quot;));&#10;        MenuItem exportCSV = new MenuItem(&quot;Export to CSV&quot;);&#10;        exportCSV.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+S&quot;));&#10;        MenuItem exportExcel = new MenuItem(&quot;Export to Excel&quot;);&#10;        exportExcel.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+Shift+E&quot;));&#10;        exportMenu.getItems().addAll(exportPDF, new SeparatorMenuItem(),&#10;                                   exportCSV, exportExcel);&#10;&#10;        Menu importMenu = new Menu(&quot;Import&quot;);&#10;        MenuItem importCSV = new MenuItem(&quot;Import from CSV&quot;);&#10;        MenuItem importExcel = new MenuItem(&quot;Import from Excel&quot;);&#10;        importMenu.getItems().addAll(importCSV, importExcel);&#10;&#10;        // Event handlers for import&#10;        importCSV.setOnAction(e -&gt; handleImportCSV());&#10;        importExcel.setOnAction(e -&gt; handleImportExcel());&#10;&#10;        // Help Menu&#10;        Menu helpMenu = new Menu(&quot;Help&quot;);&#10;        MenuItem shortcuts = new MenuItem(&quot;Keyboard Shortcuts&quot;);&#10;        shortcuts.setAccelerator(KeyCombination.keyCombination(&quot;F1&quot;));&#10;        MenuItem about = new MenuItem(&quot;About&quot;);&#10;        helpMenu.getItems().addAll(shortcuts, about);&#10;&#10;        menuBar.getMenus().addAll(connectMenu, dataMenu, viewMenu, exportMenu, importMenu, helpMenu);&#10;&#10;        // Add event handlers&#10;        // Connect handlers&#10;        openConnection.setOnAction(e -&gt; {&#10;            DatabaseConnectionView connectionView = new DatabaseConnectionView(null);&#10;            connectionView.setOnShowing(event -&gt; {&#10;                Stage stage = (Stage) connectionView.getDialogPane().getScene().getWindow();&#10;                stage.centerOnScreen();&#10;            });&#10;            connectionView.showAndWait().ifPresent(success -&gt; {&#10;                if (success) {&#10;                    refreshData();&#10;                }&#10;            });&#10;        });&#10;&#10;        closeConnection.setOnAction(e -&gt; {&#10;            Alert confirmation = new Alert(Alert.AlertType.CONFIRMATION);&#10;            confirmation.setTitle(&quot;Close Connection&quot;);&#10;            confirmation.setHeaderText(&quot;Close Database Connection&quot;);&#10;            confirmation.setContentText(&quot;Are you sure you want to close the database connection?&quot;);&#10;&#10;            if (confirmation.showAndWait().orElse(ButtonType.CANCEL) == ButtonType.OK) {&#10;                DBConnectionManager.getInstance().closeConnection();&#10;                statusLabel.setText(&quot;Database Status: Disconnected&quot;);&#10;                statusLabel.getStyleClass().remove(&quot;connected&quot;);&#10;                statusLabel.getStyleClass().add(&quot;disconnected&quot;);&#10;                tableView.getItems().clear();&#10;                totalRecordsLabel.setText(&quot;Total Records: 0&quot;);&#10;&#10;                Alert info = new Alert(Alert.AlertType.INFORMATION);&#10;                info.setTitle(&quot;Connection Closed&quot;);&#10;                info.setHeaderText(null);&#10;                info.setContentText(&quot;Database connection has been closed successfully.&quot;);&#10;                info.showAndWait();&#10;            }&#10;        });&#10;&#10;        // Data handlers&#10;        addData.setOnAction(e -&gt; showAddCustomerDialog());&#10;        editData.setOnAction(e -&gt; {&#10;            Customer selected = tableView.getSelectionModel().getSelectedItem();&#10;            if (selected != null) {&#10;                showAddEditDialog(selected);&#10;            } else {&#10;                showError(&quot;No Selection&quot;, &quot;Please select a customer to edit&quot;);&#10;            }&#10;        });&#10;        deleteData.setOnAction(e -&gt; deleteCustomer());&#10;        refreshTable.setOnAction(e -&gt; refreshData());&#10;&#10;        // View handlers&#10;        search.setOnAction(e -&gt; searchField.requestFocus());&#10;        clearSearch.setOnAction(e -&gt; {&#10;            searchField.clear();&#10;            refreshData();&#10;        });&#10;        showActive.setOnAction(e -&gt; filterActiveCustomers());&#10;        showInactive.setOnAction(e -&gt; filterInactiveCustomers());&#10;        showAll.setOnAction(e -&gt; refreshData());&#10;&#10;        // Export handlers&#10;        exportPDF.setOnAction(e -&gt; exportToPdf());&#10;        exportCSV.setOnAction(e -&gt; exportToCsv());&#10;        exportExcel.setOnAction(e -&gt; exportToExcel());&#10;&#10;        // Import handlers&#10;        importCSV.setOnAction(e -&gt; handleImportCSV());&#10;        importExcel.setOnAction(e -&gt; handleImportExcel());&#10;&#10;        // Help handlers&#10;        shortcuts.setOnAction(e -&gt; showKeyboardShortcuts());&#10;        about.setOnAction(e -&gt; showAboutDialog());&#10;&#10;        return menuBar;&#10;    }&#10;&#10;    private TableView&lt;Customer&gt; createTableView() {&#10;        TableView&lt;Customer&gt; table = new TableView&lt;&gt;();&#10;&#10;        TableColumn&lt;Customer, String&gt; nikCol = new TableColumn&lt;&gt;(&quot;NIK&quot;);&#10;        nikCol.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNik()));&#10;&#10;        TableColumn&lt;Customer, String&gt; nameCol = new TableColumn&lt;&gt;(&quot;Name&quot;);&#10;        nameCol.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getName()));&#10;&#10;        TableColumn&lt;Customer, LocalDate&gt; bornCol = new TableColumn&lt;&gt;(&quot;Birth Date&quot;);&#10;        bornCol.setCellValueFactory(cellData -&gt; new SimpleObjectProperty&lt;&gt;(cellData.getValue().getBorn()));&#10;        bornCol.setCellFactory(col -&gt; new TableCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(LocalDate date, boolean empty) {&#10;                super.updateItem(date, empty);&#10;                if (empty || date == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(date.format(DateTimeFormatter.ofPattern(&quot;dd-MM-yyyy&quot;)));&#10;                }&#10;            }&#10;        });&#10;&#10;        TableColumn&lt;Customer, Boolean&gt; activeCol = new TableColumn&lt;&gt;(&quot;Active&quot;);&#10;        activeCol.setCellValueFactory(cellData -&gt; new SimpleBooleanProperty(cellData.getValue().isActive()));&#10;        activeCol.setCellFactory(col -&gt; new TableCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(Boolean item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                    setGraphic(null);&#10;                } else {&#10;                    CheckBox checkBox = new CheckBox();&#10;                    checkBox.setSelected(item);&#10;                    checkBox.setDisable(true);&#10;                    setGraphic(checkBox);&#10;                }&#10;            }&#10;        });&#10;&#10;        TableColumn&lt;Customer, BigDecimal&gt; salaryCol = new TableColumn&lt;&gt;(&quot;Salary&quot;);&#10;        salaryCol.setCellValueFactory(cellData -&gt; new SimpleObjectProperty&lt;&gt;(cellData.getValue().getSalary()));&#10;        salaryCol.setCellFactory(col -&gt; new TableCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(BigDecimal salary, boolean empty) {&#10;                super.updateItem(salary, empty);&#10;                if (empty || salary == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(String.format(&quot;%,.2f&quot;, salary));&#10;                }&#10;            }&#10;        });&#10;        salaryCol.setStyle(&quot;-fx-alignment: CENTER-RIGHT;&quot;);&#10;&#10;        // Set column widths&#10;        nikCol.setPrefWidth(100);&#10;        nameCol.setPrefWidth(200);&#10;        bornCol.setPrefWidth(100);&#10;        activeCol.setPrefWidth(60);&#10;        salaryCol.setPrefWidth(120);&#10;&#10;        table.getColumns().addAll(nikCol, nameCol, bornCol, activeCol, salaryCol);&#10;&#10;        // Add context menu for row operations&#10;        table.setRowFactory(tv -&gt; {&#10;            TableRow&lt;Customer&gt; row = new TableRow&lt;&gt;();&#10;            ContextMenu contextMenu = new ContextMenu();&#10;&#10;            MenuItem editItem = new MenuItem(&quot;Edit&quot;);&#10;            editItem.setOnAction(event -&gt; showAddEditDialog(row.getItem()));&#10;&#10;            MenuItem deleteItem = new MenuItem(&quot;Delete&quot;);&#10;            deleteItem.setOnAction(event -&gt; {&#10;                if (row.getItem() != null) {&#10;                    try {&#10;                        customerService.deleteCustomer(row.getItem().getIdx());&#10;                        refreshData();&#10;                    } catch (SQLException e) {&#10;                        showError(&quot;Error&quot;, &quot;Failed to delete customer: &quot; + e.getMessage());&#10;                    }&#10;                }&#10;            });&#10;&#10;            contextMenu.getItems().addAll(editItem, deleteItem);&#10;&#10;            row.contextMenuProperty().bind(&#10;                    Bindings.when(row.emptyProperty())&#10;                            .then((ContextMenu) null)&#10;                            .otherwise(contextMenu)&#10;            );&#10;&#10;            return row;&#10;        });&#10;&#10;        return table;&#10;    }&#10;&#10;    private HBox createStatusBar() {&#10;        HBox statusBar = new HBox(20);&#10;        statusBar.setPadding(new Insets(10));&#10;        statusBar.getStyleClass().add(&quot;status-bar&quot;);&#10;&#10;        statusLabel = new Label();&#10;        totalRecordsLabel = new Label();&#10;&#10;        statusBar.getChildren().addAll(statusLabel, totalRecordsLabel);&#10;        return statusBar;&#10;    }&#10;&#10;    private ImageView createPaginationIcon(String iconName) {&#10;        String resourcePath = &quot;/com/tama/customer/icons/&quot; + iconName + &quot;.png&quot;;&#10;        try {&#10;            var resourceStream = getClass().getResourceAsStream(resourcePath);&#10;            if (resourceStream == null) {&#10;                System.err.println(&quot;Resource not found: &quot; + resourcePath);&#10;                return null;&#10;            }&#10;            Image image = new Image(resourceStream);&#10;            if (image.isError()) {&#10;                System.err.println(&quot;Error loading icon: &quot; + iconName + &quot;, path: &quot; + resourcePath + &quot;, error: &quot; + image.getException());&#10;                return null;&#10;            }&#10;            ImageView imageView = new ImageView(image);&#10;            imageView.setFitWidth(24);&#10;            imageView.setFitHeight(24);&#10;            return imageView;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Exception loading icon: &quot; + iconName + &quot;, path: &quot; + resourcePath + &quot;, error: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private HBox createPaginationControls() {&#10;        HBox controls = new HBox(10);&#10;        controls.setAlignment(Pos.CENTER);&#10;        controls.getStyleClass().add(&quot;pagination-controls&quot;);&#10;&#10;        // Create pagination buttons with icons&#10;        firstPageButton = new Button();&#10;        firstPageButton.getStyleClass().add(&quot;pagination-button&quot;);&#10;        firstPageButton.setGraphic(createPaginationIcon(&quot;first&quot;));&#10;        firstPageButton.setTooltip(new Tooltip(&quot;First Page&quot;));&#10;&#10;        prevPageButton = new Button();&#10;        prevPageButton.getStyleClass().add(&quot;pagination-button&quot;);&#10;        prevPageButton.setGraphic(createPaginationIcon(&quot;previous&quot;));&#10;        prevPageButton.setTooltip(new Tooltip(&quot;Previous Page&quot;));&#10;&#10;        pageNumberLabel = new Label(&quot;Page 1&quot;);&#10;        pageNumberLabel.getStyleClass().add(&quot;page-number-label&quot;);&#10;&#10;        nextPageButton = new Button();&#10;        nextPageButton.getStyleClass().add(&quot;pagination-button&quot;);&#10;        nextPageButton.setGraphic(createPaginationIcon(&quot;next&quot;));&#10;        nextPageButton.setTooltip(new Tooltip(&quot;Next Page&quot;));&#10;&#10;        lastPageButton = new Button();&#10;        lastPageButton.getStyleClass().add(&quot;pagination-button&quot;);&#10;        lastPageButton.setGraphic(createPaginationIcon(&quot;last&quot;));&#10;        lastPageButton.setTooltip(new Tooltip(&quot;Last Page&quot;));&#10;&#10;        // Create records per page combo box&#10;        recordLimitComboBox = new ComboBox&lt;&gt;();&#10;        recordLimitComboBox.getItems().addAll(1, 5, 10, 25, 50, 100);&#10;        recordLimitComboBox.setValue(10); // Default value&#10;        recordLimitComboBox.setPromptText(&quot;Records per page&quot;);&#10;&#10;        Label recordsPerPageLabel = new Label(&quot;Records per page:&quot;);&#10;&#10;        // Add event handlers&#10;        firstPageButton.setOnAction(e -&gt; goToFirstPage());&#10;        prevPageButton.setOnAction(e -&gt; goToPreviousPage());&#10;        nextPageButton.setOnAction(e -&gt; goToNextPage());&#10;        lastPageButton.setOnAction(e -&gt; goToLastPage());&#10;        recordLimitComboBox.setOnAction(e -&gt; updatePagination());&#10;&#10;        controls.getChildren().addAll(&#10;            firstPageButton, prevPageButton,&#10;            pageNumberLabel,&#10;            nextPageButton, lastPageButton,&#10;            new Separator(Orientation.VERTICAL),&#10;            recordsPerPageLabel, recordLimitComboBox&#10;        );&#10;&#10;        return controls;&#10;    }&#10;&#10;    private void goToFirstPage() {&#10;        if (currentPage &gt; 0) {&#10;            currentPage = 0;&#10;            updateTableView();&#10;        }&#10;    }&#10;&#10;    private void goToPreviousPage() {&#10;        if (currentPage &gt; 0) {&#10;            currentPage--;&#10;            updateTableView();&#10;        }&#10;    }&#10;&#10;    private void goToNextPage() {&#10;        int maxPage = (int) Math.ceil((double) masterData.size() / recordLimitComboBox.getValue()) - 1;&#10;        if (currentPage &lt; maxPage) {&#10;            currentPage++;&#10;            updateTableView();&#10;        }&#10;    }&#10;&#10;    private void goToLastPage() {&#10;        int maxPage = (int) Math.ceil((double) masterData.size() / recordLimitComboBox.getValue()) - 1;&#10;        if (currentPage &lt; maxPage) {&#10;            currentPage = maxPage;&#10;            updateTableView();&#10;        }&#10;    }&#10;&#10;    private void updatePagination() {&#10;        currentPage = 0; // Reset to first page when changing records per page&#10;        updateTableView();&#10;    }&#10;&#10;    private void updateTableView() {&#10;        int fromIndex = currentPage * recordLimitComboBox.getValue();&#10;        int toIndex = Math.min(fromIndex + recordLimitComboBox.getValue(), masterData.size());&#10;&#10;        ObservableList&lt;Customer&gt; pageData = FXCollections.observableArrayList(&#10;            masterData.subList(fromIndex, toIndex)&#10;        );&#10;        tableView.setItems(pageData);&#10;&#10;        // Update page number label&#10;        int totalPages = (int) Math.ceil((double) masterData.size() / recordLimitComboBox.getValue());&#10;        pageNumberLabel.setText(String.format(&quot;Page %d of %d&quot;, currentPage + 1, totalPages));&#10;&#10;        // Update navigation buttons state&#10;        updateNavigationButtons(totalPages);&#10;&#10;        updateStatus();&#10;    }&#10;&#10;    private void updateNavigationButtons(int totalPages) {&#10;        firstPageButton.setDisable(currentPage == 0);&#10;        prevPageButton.setDisable(currentPage == 0);&#10;        nextPageButton.setDisable(currentPage &gt;= totalPages - 1);&#10;        lastPageButton.setDisable(currentPage &gt;= totalPages - 1);&#10;    }&#10;&#10;    private void refreshData() {&#10;        try {&#10;            masterData = customerService.getAllCustomers();&#10;            updatePagination();&#10;        } catch (SQLException e) {&#10;            showError(&quot;Error loading data&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void updateStatus() {&#10;        try {&#10;            boolean connected = DatabaseConfig.getInstance().testConnection();&#10;            statusLabel.setText(&quot;Database Status: &quot; + (connected ? &quot;Connected&quot; : &quot;Disconnected&quot;));&#10;            statusLabel.getStyleClass().add(connected ? &quot;connected&quot; : &quot;disconnected&quot;);&#10;&#10;            int total = customerService.getTotalCustomers();&#10;            totalRecordsLabel.setText(&quot;Total Records: &quot; + total);&#10;        } catch (SQLException e) {&#10;            statusLabel.setText(&quot;Database Status: Error&quot;);&#10;            statusLabel.getStyleClass().add(&quot;disconnected&quot;);&#10;        }&#10;    }&#10;&#10;    private void showError(String title, String header, String message) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(title);&#10;        alert.setHeaderText(header);&#10;        alert.setContentText(message);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void showError(String title, String message) {&#10;        showError(title, null, message);&#10;    }&#10;&#10;    private void deleteCustomer() {&#10;        Customer selected = tableView.getSelectionModel().getSelectedItem();&#10;        if (selected == null) {&#10;            showError(&quot;Error&quot;, &quot;Please select a customer to delete&quot;);&#10;            return;&#10;        }&#10;&#10;        Alert confirmation = new Alert(Alert.AlertType.CONFIRMATION);&#10;        confirmation.setTitle(&quot;Confirm Delete&quot;);&#10;        confirmation.setHeaderText(null);&#10;        confirmation.setContentText(&quot;Are you sure you want to delete this customer?&quot;);&#10;&#10;        if (confirmation.showAndWait().orElse(ButtonType.CANCEL) == ButtonType.OK) {&#10;            try {&#10;                customerService.deleteCustomer(selected.getIdx());&#10;                refreshData();&#10;            } catch (SQLException e) {&#10;                showError(&quot;Error deleting customer&quot;, e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private String getDownloadsPath() {&#10;        return System.getProperty(&quot;user.home&quot;) + &quot;/Downloads&quot;;&#10;    }&#10;&#10;    private void exportToPdf() {&#10;        // Get the current items shown in the table view (filtered by search)&#10;        List&lt;Customer&gt; customers = tableView.getItems();&#10;&#10;        if (customers.isEmpty()) {&#10;            showError(&quot;Export Error&quot;, &quot;No data to export. The search results are empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        String fileName = &quot;customers_export_&quot; + LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyyMMdd_HHmmss&quot;)) + &quot;.pdf&quot;;&#10;        String path = getDownloadsPath() + &quot;/&quot; + fileName;&#10;&#10;        Task&lt;Void&gt; task = new ExportService().exportToPdf(customers, path);&#10;&#10;        ProgressDialog progressDialog = new ProgressDialog(task);&#10;        progressDialog.setTitle(&quot;Export Progress&quot;);&#10;        progressDialog.setHeaderText(null);&#10;        progressDialog.setContentText(&quot;Exporting searched data to PDF...&quot;);&#10;&#10;        task.setOnSucceeded(e -&gt; {&#10;            progressDialog.close();&#10;            Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;            alert.setTitle(&quot;Export Complete&quot;);&#10;            alert.setHeaderText(null);&#10;            alert.setContentText(&quot;Export completed successfully!\nFile saved in Downloads folder as: &quot; + fileName);&#10;            alert.showAndWait();&#10;        });&#10;&#10;        task.setOnFailed(e -&gt; {&#10;            progressDialog.close();&#10;            showError(&quot;Export Error&quot;, task.getException().getMessage());&#10;        });&#10;&#10;        new Thread(task).start();&#10;    }&#10;&#10;    private void exportToExcel() {&#10;        // Get the current items shown in the table view (filtered by search)&#10;        List&lt;Customer&gt; customers = tableView.getItems();&#10;        &#10;        if (customers.isEmpty()) {&#10;            showError(&quot;Export Error&quot;, &quot;No data to export. The search results are empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        String fileName = &quot;customers_export_&quot; + LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyyMMdd_HHmmss&quot;)) + &quot;.xlsx&quot;;&#10;        String path = getDownloadsPath() + &quot;/&quot; + fileName;&#10;&#10;        Task&lt;Void&gt; task = new ExportService().exportToExcel(customers, path);&#10;&#10;        ProgressDialog progressDialog = new ProgressDialog(task);&#10;        progressDialog.setTitle(&quot;Export Progress&quot;);&#10;        progressDialog.setHeaderText(null);&#10;        progressDialog.setContentText(&quot;Exporting searched data to Excel...&quot;);&#10;&#10;        task.setOnSucceeded(e -&gt; {&#10;            progressDialog.close();&#10;            Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;            alert.setTitle(&quot;Export Complete&quot;);&#10;            alert.setHeaderText(null);&#10;            alert.setContentText(&quot;Export completed successfully!\nFile saved in Downloads folder as: &quot; + fileName);&#10;            alert.showAndWait();&#10;        });&#10;&#10;        task.setOnFailed(e -&gt; {&#10;            progressDialog.close();&#10;            showError(&quot;Export Error&quot;, task.getException().getMessage());&#10;        });&#10;&#10;        new Thread(task).start();&#10;    }&#10;&#10;    private void exportToCsv() {&#10;        // Get the current items shown in the table view (filtered by search)&#10;        List&lt;Customer&gt; customers = tableView.getItems();&#10;&#10;        if (customers.isEmpty()) {&#10;            showError(&quot;Export Error&quot;, &quot;No data to export. The search results are empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        String fileName = &quot;customers_export_&quot; + LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyyMMdd_HHmmss&quot;)) + &quot;.csv&quot;;&#10;        String path = getDownloadsPath() + &quot;/&quot; + fileName;&#10;&#10;        Task&lt;Void&gt; task = new ExportService().exportToCsv(customers, path);&#10;&#10;        ProgressDialog progressDialog = new ProgressDialog(task);&#10;        progressDialog.setTitle(&quot;Export Progress&quot;);&#10;        progressDialog.setHeaderText(null);&#10;        progressDialog.setContentText(&quot;Exporting searched data to CSV...&quot;);&#10;&#10;        task.setOnSucceeded(e -&gt; {&#10;            progressDialog.close();&#10;            Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;            alert.setTitle(&quot;Export Complete&quot;);&#10;            alert.setHeaderText(null);&#10;            alert.setContentText(&quot;Export completed successfully!\nFile saved in Downloads folder as: &quot; + fileName);&#10;            alert.showAndWait();&#10;        });&#10;&#10;        task.setOnFailed(e -&gt; {&#10;            progressDialog.close();&#10;            showError(&quot;Export Error&quot;, task.getException().getMessage());&#10;        });&#10;&#10;        new Thread(task).start();&#10;    }&#10;&#10;&#10;    private void showAddEditDialog(Customer customer) {&#10;        CustomerDialog dialog = new CustomerDialog(customer);&#10;        dialog.showAndWait().ifPresent(result -&gt; {&#10;            try {&#10;                if (customer == null) {&#10;                    customerService.saveCustomer(result);&#10;                } else {&#10;                    customerService.updateCustomer(result);&#10;                }&#10;                refreshData();&#10;            } catch (SQLException e) {&#10;                showError(&quot;Error saving customer&quot;, e.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showAddCustomerDialog() {&#10;        showAddEditDialog(null);&#10;    }&#10;&#10;    private void setupKeyboardShortcuts(Scene scene) {&#10;        scene.setOnKeyPressed(e -&gt; {&#10;            if (e.isControlDown()) {&#10;                switch (e.getCode()) {&#10;                    case N -&gt; showAddCustomerDialog();&#10;                    case R -&gt; refreshData();&#10;                    case F -&gt; tableView.requestFocus();&#10;                    case DELETE -&gt; deleteCustomer();&#10;                    default -&gt; {}&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showKeyboardShortcuts() {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(&quot;Keyboard Shortcuts&quot;);&#10;        alert.setHeaderText(&quot;Available Keyboard Shortcuts&quot;);&#10;        alert.setContentText(&quot;&quot;&quot;&#10;            Data Management:&#10;            Ctrl+N: Add new customer&#10;            Ctrl+E: Edit selected customer&#10;            Delete: Delete selected customer&#10;            Ctrl+R: Refresh data&#10;            &#10;            View &amp; Search:&#10;            Ctrl+F: Focus search box&#10;            Enter: Trigger search&#10;            &#10;            Export:&#10;            Ctrl+P: Export to PDF&#10;            Ctrl+S: Export to CSV&#10;            Ctrl+Shift+E: Export to Excel&#10;            &#10;            General:&#10;            F1: Show this help&#10;            Esc: Close dialogs&#10;            &quot;&quot;&quot;);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void showAboutDialog() {&#10;        Alert about = new Alert(Alert.AlertType.INFORMATION);&#10;        about.setTitle(&quot;About Customer Management System&quot;);&#10;        about.setHeaderText(&quot;Customer Management System&quot;);&#10;        about.setContentText(&quot;&quot;&quot;&#10;            Version 1.0&#10;            Built with JavaFX 21&#10;            &#10;            A modern desktop application for managing customer data&#10;            with support for various data formats and reporting.&quot;&quot;&quot;);&#10;        about.showAndWait();&#10;    }&#10;&#10;    private void filterActiveCustomers() {&#10;        try {&#10;            ObservableList&lt;Customer&gt; customers = customerService.getAllCustomers();&#10;            masterData = FXCollections.observableArrayList(&#10;                customers.filtered(Customer::isActive)&#10;            );&#10;            updatePagination();&#10;        } catch (SQLException e) {&#10;            showError(&quot;Error loading data&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void filterInactiveCustomers() {&#10;        try {&#10;            ObservableList&lt;Customer&gt; customers = customerService.getAllCustomers();&#10;            masterData = FXCollections.observableArrayList(&#10;                customers.filtered(customer -&gt; !customer.isActive())&#10;            );&#10;            updatePagination();&#10;        } catch (SQLException e) {&#10;            showError(&quot;Error loading data&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void handleImportCSV() {&#10;        FileChooser fileChooser = new FileChooser();&#10;        fileChooser.setTitle(&quot;Select CSV File&quot;);&#10;        fileChooser.getExtensionFilters().add(&#10;            new FileChooser.ExtensionFilter(&quot;CSV Files&quot;, &quot;*.csv&quot;)&#10;        );&#10;&#10;        File file = fileChooser.showOpenDialog(primaryStage);&#10;        if (file != null) {&#10;            ImportService importService = new ImportService(customerService.getCustomerDAO());&#10;            Task&lt;ImportService.ImportResult&gt; task = new Task&lt;&gt;() {&#10;                @Override&#10;                protected ImportService.ImportResult call() throws Exception {&#10;                    return importService.importFromCSV(file, progress -&gt; {&#10;                        updateProgress(progress * 100, 100);&#10;                        updateMessage(String.format(&quot;Importing... %.0f%%&quot;, progress * 100));&#10;                    });&#10;                }&#10;            };&#10;&#10;            ProgressDialog progressDialog = new ProgressDialog(task);&#10;            progressDialog.setTitle(&quot;Importing CSV&quot;);&#10;            progressDialog.initOwner(primaryStage);&#10;&#10;            task.setOnSucceeded(event -&gt; {&#10;                ImportService.ImportResult result = task.getValue();&#10;                Platform.runLater(() -&gt; {&#10;                    try {&#10;                        progressDialog.cleanup();&#10;                        progressDialog.hide();&#10;&#10;                        if (!result.getSuccessfulImports().isEmpty()) {&#10;                            importService.saveImportedCustomers(result.getSuccessfulImports());&#10;                        }&#10;&#10;                        // Show confirmation dialog&#10;                        Alert alert = new Alert(&#10;                            result.getFailures().isEmpty() ? Alert.AlertType.INFORMATION : Alert.AlertType.WARNING&#10;                        );&#10;                        alert.setTitle(&quot;Import Result&quot;);&#10;                        alert.setHeaderText(null);&#10;&#10;                        StringBuilder message = new StringBuilder();&#10;                        message.append(&quot;Import completed!\n\n&quot;);&#10;                        message.append(String.format(&quot;Total rows processed: %d\n&quot;, result.getTotalRows()));&#10;                        message.append(String.format(&quot;Successfully imported: %d\n&quot;, result.getSuccessfulImports().size()));&#10;                        message.append(String.format(&quot;Failed to import: %d\n&quot;, result.getFailures().size()));&#10;&#10;                        if (!result.getFailures().isEmpty()) {&#10;                            message.append(&quot;\nFailed rows:\n&quot;);&#10;                            result.getFailures().forEach((row, error) -&gt;&#10;                                message.append(String.format(&quot;Row %d: %s\n&quot;, row, error)));&#10;                        }&#10;&#10;                        // Use TextArea for long messages&#10;                        if (message.length() &gt; 200) {&#10;                            TextArea textArea = new TextArea(message.toString());&#10;                            textArea.setEditable(false);&#10;                            textArea.setWrapText(true);&#10;                            textArea.setMaxWidth(Double.MAX_VALUE);&#10;                            textArea.setMaxHeight(Double.MAX_VALUE);&#10;                            alert.getDialogPane().setContent(textArea);&#10;                        } else {&#10;                            alert.setContentText(message.toString());&#10;                        }&#10;&#10;                        alert.showAndWait();&#10;                        refreshData();&#10;                    } catch (SQLException e) {&#10;                        showError(&quot;Import Error&quot;, &quot;Failed to save imported data: &quot; + e.getMessage());&#10;                    }&#10;                });&#10;            });&#10;&#10;            task.setOnFailed(event -&gt; {&#10;                Platform.runLater(() -&gt; {&#10;                    progressDialog.cleanup();&#10;                    progressDialog.hide();&#10;                    showError(&quot;Import Error&quot;, &quot;Failed to import CSV file&quot;, task.getException().getMessage());&#10;                });&#10;            });&#10;&#10;            Thread importThread = new Thread(task);&#10;            importThread.setDaemon(true);&#10;            importThread.start();&#10;            progressDialog.show();&#10;        }&#10;    }&#10;&#10;    private void handleImportExcel() {&#10;        FileChooser fileChooser = new FileChooser();&#10;        fileChooser.setTitle(&quot;Select Excel File&quot;);&#10;        fileChooser.getExtensionFilters().addAll(&#10;            new FileChooser.ExtensionFilter(&quot;Excel Files&quot;, &quot;*.xlsx&quot;, &quot;*.xls&quot;)&#10;        );&#10;&#10;        File file = fileChooser.showOpenDialog(primaryStage);&#10;        if (file != null) {&#10;            ImportService importService = new ImportService(customerService.getCustomerDAO());&#10;            Task&lt;ImportService.ImportResult&gt; task = new Task&lt;&gt;() {&#10;                @Override&#10;                protected ImportService.ImportResult call() throws Exception {&#10;                    updateProgress(0, 100);&#10;                    updateMessage(&quot;Importing Excel file...&quot;);&#10;                    return importService.importFromExcel(file);&#10;                }&#10;            };&#10;&#10;            ProgressDialog progressDialog = new ProgressDialog(task);&#10;            progressDialog.setTitle(&quot;Importing Excel&quot;);&#10;            progressDialog.initOwner(primaryStage);&#10;&#10;            task.setOnSucceeded(event -&gt; {&#10;                ImportService.ImportResult result = task.getValue();&#10;                Platform.runLater(() -&gt; {&#10;                    try {&#10;                        progressDialog.close();&#10;&#10;                        if (!result.getSuccessfulImports().isEmpty()) {&#10;                            importService.saveImportedCustomers(result.getSuccessfulImports());&#10;                        }&#10;                        showImportResult(result);&#10;                        refreshData();&#10;                    } catch (SQLException e) {&#10;                        showError(&quot;Import Error&quot;, &quot;Failed to save imported data: &quot; + e.getMessage());&#10;                    }&#10;                });&#10;            });&#10;&#10;            task.setOnFailed(event -&gt; {&#10;                Platform.runLater(() -&gt; {&#10;                    progressDialog.close();&#10;                    showError(&quot;Import Error&quot;, &quot;Failed to import Excel file&quot;, task.getException().getMessage());&#10;                });&#10;            });&#10;&#10;            Thread importThread = new Thread(task);&#10;            importThread.setDaemon(true);&#10;            importThread.start();&#10;            progressDialog.show();&#10;        }&#10;    }&#10;&#10;    private void showImportResult(ImportService.ImportResult result) {&#10;        int successCount = result.getSuccessfulImports().size();&#10;        int failureCount = result.getFailures().size();&#10;&#10;        StringBuilder message = new StringBuilder();&#10;        message.append(String.format(&quot;Total rows processed: %d\n&quot;, result.getTotalRows()));&#10;        message.append(String.format(&quot;Successfully imported: %d\n&quot;, successCount));&#10;        message.append(String.format(&quot;Failed to import: %d\n\n&quot;, failureCount));&#10;&#10;        if (failureCount &gt; 0) {&#10;            message.append(&quot;Failed rows details:\n&quot;);&#10;            result.getFailures().forEach((row, error) -&gt;&#10;                message.append(String.format(&quot;Row %d: %s\n&quot;, row, error)));&#10;        }&#10;&#10;        Alert alert = new Alert(failureCount &gt; 0 ? Alert.AlertType.WARNING : Alert.AlertType.INFORMATION);&#10;        alert.setTitle(&quot;Import Result&quot;);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(message.toString());&#10;&#10;        // If the message is too long, show it in a scrollable text area&#10;        if (message.length() &gt; 200) {&#10;            TextArea textArea = new TextArea(message.toString());&#10;            textArea.setEditable(false);&#10;            textArea.setWrapText(true);&#10;            textArea.setMaxHeight(400);&#10;            textArea.setMaxWidth(500);&#10;&#10;            alert.getDialogPane().setContent(textArea);&#10;        }&#10;&#10;        alert.showAndWait();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        launch(args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.tama.customer;&#10;&#10;import com.tama.customer.config.DatabaseConfig;&#10;import com.tama.customer.dao.DBConnectionManager;&#10;import com.tama.customer.model.Customer;&#10;import com.tama.customer.service.CustomerService;&#10;import com.tama.customer.service.ExportService;&#10;import com.tama.customer.service.ImportService;&#10;import com.tama.customer.view.CustomerDialog;&#10;import com.tama.customer.view.DatabaseConnectionView;&#10;import com.tama.customer.view.ProgressDialog;&#10;import javafx.application.Application;&#10;import javafx.application.Platform;&#10;import javafx.beans.binding.Bindings;&#10;import javafx.beans.property.SimpleBooleanProperty;&#10;import javafx.beans.property.SimpleObjectProperty;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.concurrent.Task;&#10;import javafx.geometry.Insets;&#10;import javafx.geometry.Orientation;&#10;import javafx.geometry.Pos;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.KeyCode;&#10;import javafx.scene.input.KeyCombination;&#10;import javafx.scene.layout.BorderPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.layout.Priority;&#10;import javafx.scene.layout.VBox;&#10;import javafx.stage.FileChooser;&#10;import javafx.stage.Stage;&#10;&#10;import java.io.File;&#10;import java.math.BigDecimal;&#10;import java.sql.SQLException;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.util.function.BiFunction;&#10;&#10;public class MainApplication extends Application {&#10;    private CustomerService customerService;&#10;    private Stage primaryStage;&#10;    private TableView&lt;Customer&gt; tableView;&#10;    private Label statusLabel;&#10;    private Label totalRecordsLabel;&#10;    private TextField searchField;  // Add this field at class level&#10;&#10;    private Pagination pagination;&#10;    private ComboBox&lt;Integer&gt; recordLimitComboBox;&#10;    private final int[] RECORD_LIMITS = {1, 5, 10, 25, 50, 100};&#10;    private int currentPage = 0;&#10;    private ObservableList&lt;Customer&gt; masterData = FXCollections.observableArrayList();&#10;    private Label pageNumberLabel;&#10;&#10;    private Button firstPageButton;&#10;    private Button prevPageButton;&#10;    private Button nextPageButton;&#10;    private Button lastPageButton;&#10;&#10;    @Override&#10;    public void start(Stage stage) {&#10;        this.primaryStage = stage;&#10;        customerService = new CustomerService();&#10;&#10;        // Create an initial empty scene to ensure proper initialization&#10;        Scene initialScene = new Scene(new javafx.scene.layout.StackPane(), 1, 1);&#10;        stage.setScene(initialScene);&#10;&#10;        // Show database connection dialog&#10;        DatabaseConnectionView dbView = new DatabaseConnectionView(null); // Set owner to null&#10;        dbView.setOnShowing(event -&gt; {&#10;            Stage dbStage = (Stage) dbView.getDialogPane().getScene().getWindow();&#10;            dbStage.centerOnScreen();&#10;        });&#10;&#10;        dbView.showAndWait().ifPresent(success -&gt; {&#10;            if (success) {&#10;                showMainWindow();&#10;            } else {&#10;                System.exit(0);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showMainWindow() {&#10;        BorderPane root = new BorderPane();&#10;        MenuBar menuBar = createMenuBar();&#10;        root.setTop(menuBar);&#10;&#10;        // Create search box and table container&#10;        VBox centerBox = new VBox(10);&#10;        centerBox.setPadding(new Insets(10));&#10;        VBox.setVgrow(centerBox, Priority.ALWAYS); // Make centerBox fill vertical space&#10;&#10;        // Add search box&#10;        HBox searchBox = new HBox(10);&#10;        searchBox.getStyleClass().add(&quot;search-box&quot;);&#10;        searchField = new TextField();&#10;        searchField.setPromptText(&quot;Search by NIK or Name&quot;);&#10;        searchField.setPrefWidth(300);&#10;        Button searchButton = new Button(&quot;Search&quot;);&#10;        searchBox.getChildren().addAll(new Label(&quot;Search:&quot;), searchField, searchButton);&#10;&#10;        // Create table&#10;        tableView = createTableView();&#10;        VBox.setVgrow(tableView, Priority.ALWAYS); // Make tableView fill vertical space&#10;&#10;        // Create pagination controls&#10;        HBox paginationControls = createPaginationControls();&#10;&#10;        centerBox.getChildren().addAll(searchBox, tableView, paginationControls);&#10;        root.setCenter(centerBox);&#10;&#10;        // Add search functionality&#10;        searchButton.setOnAction(e -&gt; {&#10;            try {&#10;                ObservableList&lt;Customer&gt; searchResults = customerService.searchCustomers(searchField.getText());&#10;                tableView.setItems(searchResults);&#10;                updateStatus();&#10;            } catch (SQLException ex) {&#10;                showError(&quot;Search Error&quot;, &quot;Failed to search customers: &quot; + ex.getMessage());&#10;            }&#10;        });&#10;&#10;        // Add enter key handler for search&#10;        searchField.setOnKeyPressed(e -&gt; {&#10;            if (e.getCode() == KeyCode.ENTER) {&#10;                searchButton.fire();&#10;            }&#10;        });&#10;&#10;        // Create status bar&#10;        HBox statusBar = createStatusBar();&#10;        root.setBottom(statusBar);&#10;&#10;        Scene scene = new Scene(root, 800, 600);&#10;        scene.getStylesheets().add(getClass().getResource(&quot;styles.css&quot;).toExternalForm());&#10;&#10;        // Setup keyboard shortcuts&#10;        setupKeyboardShortcuts(scene);&#10;&#10;        primaryStage.setTitle(&quot;Customer Management System&quot;);&#10;        primaryStage.setScene(scene);&#10;        primaryStage.show();&#10;&#10;        // Load initial data&#10;        refreshData();&#10;        updateStatus();&#10;&#10;        primaryStage.setOnCloseRequest(event -&gt; {&#10;            event.consume(); // Prevent default close operation&#10;            closeApplication();&#10;        });&#10;    }&#10;&#10;    private void closeApplication() {&#10;        Alert confirmation = new Alert(Alert.AlertType.CONFIRMATION);&#10;        confirmation.setTitle(&quot;Exit Application&quot;);&#10;        confirmation.setHeaderText(&quot;Are you sure you want to exit?&quot;);&#10;        confirmation.setContentText(&quot;Any unsaved changes will be lost.&quot;);&#10;&#10;        if (confirmation.showAndWait().orElse(ButtonType.CANCEL) == ButtonType.OK) {&#10;            // Close database connection&#10;            DBConnectionManager.getInstance().closeConnection();&#10;            Platform.exit();&#10;        }&#10;    }&#10;&#10;    private MenuBar createMenuBar() {&#10;        MenuBar menuBar = new MenuBar();&#10;&#10;        // Connect Menu&#10;        Menu connectMenu = new Menu(&quot;Connect&quot;);&#10;        MenuItem openConnection = new MenuItem(&quot;Open Connection&quot;);&#10;        MenuItem closeConnection = new MenuItem(&quot;Close Connection&quot;);&#10;        connectMenu.getItems().addAll(openConnection, closeConnection);&#10;&#10;        // Data Menu&#10;        Menu dataMenu = new Menu(&quot;Data&quot;);&#10;        MenuItem addData = new MenuItem(&quot;Add Data&quot;);&#10;        addData.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+N&quot;));&#10;        MenuItem editData = new MenuItem(&quot;Edit Selected&quot;);&#10;        editData.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+E&quot;));&#10;        MenuItem deleteData = new MenuItem(&quot;Delete Selected&quot;);&#10;        deleteData.setAccelerator(KeyCombination.keyCombination(&quot;Delete&quot;));&#10;        MenuItem refreshTable = new MenuItem(&quot;Refresh Data&quot;);&#10;        refreshTable.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+R&quot;));&#10;        dataMenu.getItems().addAll(addData, editData, deleteData, new SeparatorMenuItem(), refreshTable);&#10;&#10;        // View Menu&#10;        Menu viewMenu = new Menu(&quot;View&quot;);&#10;        MenuItem search = new MenuItem(&quot;Search&quot;);&#10;        search.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+F&quot;));&#10;        MenuItem clearSearch = new MenuItem(&quot;Clear Search&quot;);&#10;        MenuItem showActive = new MenuItem(&quot;Show Active Only&quot;);&#10;        MenuItem showInactive = new MenuItem(&quot;Show Inactive Only&quot;);&#10;        MenuItem showAll = new MenuItem(&quot;Show All&quot;);&#10;        viewMenu.getItems().addAll(search, clearSearch, new SeparatorMenuItem(),&#10;                                 showActive, showInactive, showAll);&#10;&#10;        // Export/Import Menu&#10;        Menu exportMenu = new Menu(&quot;Export&quot;);&#10;        MenuItem exportPDF = new MenuItem(&quot;Export to PDF&quot;);&#10;        exportPDF.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+P&quot;));&#10;        MenuItem exportCSV = new MenuItem(&quot;Export to CSV&quot;);&#10;        exportCSV.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+S&quot;));&#10;        MenuItem exportExcel = new MenuItem(&quot;Export to Excel&quot;);&#10;        exportExcel.setAccelerator(KeyCombination.keyCombination(&quot;Ctrl+Shift+E&quot;));&#10;        exportMenu.getItems().addAll(exportPDF, new SeparatorMenuItem(),&#10;                                   exportCSV, exportExcel);&#10;&#10;        Menu importMenu = new Menu(&quot;Import&quot;);&#10;        MenuItem importCSV = new MenuItem(&quot;Import from CSV&quot;);&#10;        MenuItem importExcel = new MenuItem(&quot;Import from Excel&quot;);&#10;        importMenu.getItems().addAll(importCSV, importExcel);&#10;&#10;        // Event handlers for import&#10;        importCSV.setOnAction(e -&gt; handleImportCSV());&#10;        importExcel.setOnAction(e -&gt; handleImportExcel());&#10;&#10;        // Help Menu&#10;        Menu helpMenu = new Menu(&quot;Help&quot;);&#10;        MenuItem shortcuts = new MenuItem(&quot;Keyboard Shortcuts&quot;);&#10;        shortcuts.setAccelerator(KeyCombination.keyCombination(&quot;F1&quot;));&#10;        MenuItem about = new MenuItem(&quot;About&quot;);&#10;        helpMenu.getItems().addAll(shortcuts, about);&#10;&#10;        menuBar.getMenus().addAll(connectMenu, dataMenu, viewMenu, exportMenu, importMenu, helpMenu);&#10;&#10;        // Add event handlers&#10;        // Connect handlers&#10;        openConnection.setOnAction(e -&gt; {&#10;            DatabaseConnectionView connectionView = new DatabaseConnectionView(null);&#10;            connectionView.setOnShowing(event -&gt; {&#10;                Stage stage = (Stage) connectionView.getDialogPane().getScene().getWindow();&#10;                stage.centerOnScreen();&#10;            });&#10;            connectionView.showAndWait().ifPresent(success -&gt; {&#10;                if (success) {&#10;                    refreshData();&#10;                }&#10;            });&#10;        });&#10;&#10;        closeConnection.setOnAction(e -&gt; {&#10;            Alert confirmation = new Alert(Alert.AlertType.CONFIRMATION);&#10;            confirmation.setTitle(&quot;Close Connection&quot;);&#10;            confirmation.setHeaderText(&quot;Close Database Connection&quot;);&#10;            confirmation.setContentText(&quot;Are you sure you want to close the database connection?&quot;);&#10;&#10;            if (confirmation.showAndWait().orElse(ButtonType.CANCEL) == ButtonType.OK) {&#10;                DBConnectionManager.getInstance().closeConnection();&#10;                statusLabel.setText(&quot;Database Status: Disconnected&quot;);&#10;                statusLabel.getStyleClass().remove(&quot;connected&quot;);&#10;                statusLabel.getStyleClass().add(&quot;disconnected&quot;);&#10;                tableView.getItems().clear();&#10;                totalRecordsLabel.setText(&quot;Total Records: 0&quot;);&#10;&#10;                Alert info = new Alert(Alert.AlertType.INFORMATION);&#10;                info.setTitle(&quot;Connection Closed&quot;);&#10;                info.setHeaderText(null);&#10;                info.setContentText(&quot;Database connection has been closed successfully.&quot;);&#10;                info.showAndWait();&#10;            }&#10;        });&#10;&#10;        // Data handlers&#10;        addData.setOnAction(e -&gt; showAddCustomerDialog());&#10;        editData.setOnAction(e -&gt; {&#10;            Customer selected = tableView.getSelectionModel().getSelectedItem();&#10;            if (selected != null) {&#10;                showAddEditDialog(selected);&#10;            } else {&#10;                showError(&quot;No Selection&quot;, &quot;Please select a customer to edit&quot;);&#10;            }&#10;        });&#10;        deleteData.setOnAction(e -&gt; deleteCustomer());&#10;        refreshTable.setOnAction(e -&gt; refreshData());&#10;&#10;        // View handlers&#10;        search.setOnAction(e -&gt; searchField.requestFocus());&#10;        clearSearch.setOnAction(e -&gt; {&#10;            searchField.clear();&#10;            refreshData();&#10;        });&#10;        showActive.setOnAction(e -&gt; filterActiveCustomers());&#10;        showInactive.setOnAction(e -&gt; filterInactiveCustomers());&#10;        showAll.setOnAction(e -&gt; refreshData());&#10;&#10;        // Export handlers&#10;        exportPDF.setOnAction(e -&gt; exportToPdf());&#10;        exportCSV.setOnAction(e -&gt; exportToCsv());&#10;        exportExcel.setOnAction(e -&gt; exportToExcel());&#10;&#10;        // Import handlers&#10;        importCSV.setOnAction(e -&gt; handleImportCSV());&#10;        importExcel.setOnAction(e -&gt; handleImportExcel());&#10;&#10;        // Help handlers&#10;        shortcuts.setOnAction(e -&gt; showKeyboardShortcuts());&#10;        about.setOnAction(e -&gt; showAboutDialog());&#10;&#10;        return menuBar;&#10;    }&#10;&#10;    private TableView&lt;Customer&gt; createTableView() {&#10;        TableView&lt;Customer&gt; table = new TableView&lt;&gt;();&#10;&#10;        TableColumn&lt;Customer, String&gt; nikCol = new TableColumn&lt;&gt;(&quot;NIK&quot;);&#10;        nikCol.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNik()));&#10;&#10;        TableColumn&lt;Customer, String&gt; nameCol = new TableColumn&lt;&gt;(&quot;Name&quot;);&#10;        nameCol.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getName()));&#10;&#10;        TableColumn&lt;Customer, LocalDate&gt; bornCol = new TableColumn&lt;&gt;(&quot;Birth Date&quot;);&#10;        bornCol.setCellValueFactory(cellData -&gt; new SimpleObjectProperty&lt;&gt;(cellData.getValue().getBorn()));&#10;        bornCol.setCellFactory(col -&gt; new TableCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(LocalDate date, boolean empty) {&#10;                super.updateItem(date, empty);&#10;                if (empty || date == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(date.format(DateTimeFormatter.ofPattern(&quot;dd-MM-yyyy&quot;)));&#10;                }&#10;            }&#10;        });&#10;&#10;        TableColumn&lt;Customer, Boolean&gt; activeCol = new TableColumn&lt;&gt;(&quot;Active&quot;);&#10;        activeCol.setCellValueFactory(cellData -&gt; new SimpleBooleanProperty(cellData.getValue().isActive()));&#10;        activeCol.setCellFactory(col -&gt; new TableCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(Boolean item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty || item == null) {&#10;                    setText(null);&#10;                    setGraphic(null);&#10;                } else {&#10;                    CheckBox checkBox = new CheckBox();&#10;                    checkBox.setSelected(item);&#10;                    checkBox.setDisable(true);&#10;                    setGraphic(checkBox);&#10;                }&#10;            }&#10;        });&#10;&#10;        TableColumn&lt;Customer, BigDecimal&gt; salaryCol = new TableColumn&lt;&gt;(&quot;Salary&quot;);&#10;        salaryCol.setCellValueFactory(cellData -&gt; new SimpleObjectProperty&lt;&gt;(cellData.getValue().getSalary()));&#10;        salaryCol.setCellFactory(col -&gt; new TableCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(BigDecimal salary, boolean empty) {&#10;                super.updateItem(salary, empty);&#10;                if (empty || salary == null) {&#10;                    setText(null);&#10;                } else {&#10;                    setText(String.format(&quot;%,.2f&quot;, salary));&#10;                }&#10;            }&#10;        });&#10;        salaryCol.setStyle(&quot;-fx-alignment: CENTER-RIGHT;&quot;);&#10;&#10;        // Set column widths&#10;        nikCol.setPrefWidth(100);&#10;        nameCol.setPrefWidth(200);&#10;        bornCol.setPrefWidth(100);&#10;        activeCol.setPrefWidth(60);&#10;        salaryCol.setPrefWidth(120);&#10;&#10;        table.getColumns().addAll(nikCol, nameCol, bornCol, activeCol, salaryCol);&#10;&#10;        // Add context menu for row operations&#10;        table.setRowFactory(tv -&gt; {&#10;            TableRow&lt;Customer&gt; row = new TableRow&lt;&gt;();&#10;            ContextMenu contextMenu = new ContextMenu();&#10;&#10;            MenuItem editItem = new MenuItem(&quot;Edit&quot;);&#10;            editItem.setOnAction(event -&gt; showAddEditDialog(row.getItem()));&#10;&#10;            MenuItem deleteItem = new MenuItem(&quot;Delete&quot;);&#10;            deleteItem.setOnAction(event -&gt; {&#10;                if (row.getItem() != null) {&#10;                    try {&#10;                        customerService.deleteCustomer(row.getItem().getIdx());&#10;                        refreshData();&#10;                    } catch (SQLException e) {&#10;                        showError(&quot;Error&quot;, &quot;Failed to delete customer: &quot; + e.getMessage());&#10;                    }&#10;                }&#10;            });&#10;&#10;            contextMenu.getItems().addAll(editItem, deleteItem);&#10;&#10;            row.contextMenuProperty().bind(&#10;                    Bindings.when(row.emptyProperty())&#10;                            .then((ContextMenu) null)&#10;                            .otherwise(contextMenu)&#10;            );&#10;&#10;            return row;&#10;        });&#10;&#10;        return table;&#10;    }&#10;&#10;    private HBox createStatusBar() {&#10;        HBox statusBar = new HBox(20);&#10;        statusBar.setPadding(new Insets(10));&#10;        statusBar.getStyleClass().add(&quot;status-bar&quot;);&#10;&#10;        statusLabel = new Label();&#10;        totalRecordsLabel = new Label();&#10;&#10;        statusBar.getChildren().addAll(statusLabel, totalRecordsLabel);&#10;        return statusBar;&#10;    }&#10;&#10;    private ImageView createPaginationIcon(String iconName) {&#10;        String resourcePath = &quot;/com/tama/customer/icons/&quot; + iconName + &quot;.png&quot;;&#10;        try {&#10;            var resourceStream = getClass().getResourceAsStream(resourcePath);&#10;            if (resourceStream == null) {&#10;                System.err.println(&quot;Resource not found: &quot; + resourcePath);&#10;                return null;&#10;            }&#10;            Image image = new Image(resourceStream);&#10;            if (image.isError()) {&#10;                System.err.println(&quot;Error loading icon: &quot; + iconName + &quot;, path: &quot; + resourcePath + &quot;, error: &quot; + image.getException());&#10;                return null;&#10;            }&#10;            ImageView imageView = new ImageView(image);&#10;            imageView.setFitWidth(24);&#10;            imageView.setFitHeight(24);&#10;            return imageView;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Exception loading icon: &quot; + iconName + &quot;, path: &quot; + resourcePath + &quot;, error: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private HBox createPaginationControls() {&#10;        HBox controls = new HBox(10);&#10;        controls.setAlignment(Pos.CENTER);&#10;        controls.getStyleClass().add(&quot;pagination-controls&quot;);&#10;&#10;        // Create pagination buttons with icons&#10;        firstPageButton = new Button();&#10;        firstPageButton.getStyleClass().add(&quot;pagination-button&quot;);&#10;        firstPageButton.setGraphic(createPaginationIcon(&quot;first&quot;));&#10;        firstPageButton.setTooltip(new Tooltip(&quot;First Page&quot;));&#10;&#10;        prevPageButton = new Button();&#10;        prevPageButton.getStyleClass().add(&quot;pagination-button&quot;);&#10;        prevPageButton.setGraphic(createPaginationIcon(&quot;previous&quot;));&#10;        prevPageButton.setTooltip(new Tooltip(&quot;Previous Page&quot;));&#10;&#10;        pageNumberLabel = new Label(&quot;Page 1&quot;);&#10;        pageNumberLabel.getStyleClass().add(&quot;page-number-label&quot;);&#10;&#10;        nextPageButton = new Button();&#10;        nextPageButton.getStyleClass().add(&quot;pagination-button&quot;);&#10;        nextPageButton.setGraphic(createPaginationIcon(&quot;next&quot;));&#10;        nextPageButton.setTooltip(new Tooltip(&quot;Next Page&quot;));&#10;&#10;        lastPageButton = new Button();&#10;        lastPageButton.getStyleClass().add(&quot;pagination-button&quot;);&#10;        lastPageButton.setGraphic(createPaginationIcon(&quot;last&quot;));&#10;        lastPageButton.setTooltip(new Tooltip(&quot;Last Page&quot;));&#10;&#10;        // Create records per page combo box&#10;        recordLimitComboBox = new ComboBox&lt;&gt;();&#10;        recordLimitComboBox.getItems().addAll(1, 5, 10, 25, 50, 100);&#10;        recordLimitComboBox.setValue(10); // Default value&#10;        recordLimitComboBox.setPromptText(&quot;Records per page&quot;);&#10;&#10;        Label recordsPerPageLabel = new Label(&quot;Records per page:&quot;);&#10;&#10;        // Add event handlers&#10;        firstPageButton.setOnAction(e -&gt; goToFirstPage());&#10;        prevPageButton.setOnAction(e -&gt; goToPreviousPage());&#10;        nextPageButton.setOnAction(e -&gt; goToNextPage());&#10;        lastPageButton.setOnAction(e -&gt; goToLastPage());&#10;        recordLimitComboBox.setOnAction(e -&gt; updatePagination());&#10;&#10;        controls.getChildren().addAll(&#10;            firstPageButton, prevPageButton,&#10;            pageNumberLabel,&#10;            nextPageButton, lastPageButton,&#10;            new Separator(Orientation.VERTICAL),&#10;            recordsPerPageLabel, recordLimitComboBox&#10;        );&#10;&#10;        return controls;&#10;    }&#10;&#10;    private void goToFirstPage() {&#10;        if (currentPage &gt; 0) {&#10;            currentPage = 0;&#10;            updateTableView();&#10;        }&#10;    }&#10;&#10;    private void goToPreviousPage() {&#10;        if (currentPage &gt; 0) {&#10;            currentPage--;&#10;            updateTableView();&#10;        }&#10;    }&#10;&#10;    private void goToNextPage() {&#10;        int maxPage = (int) Math.ceil((double) masterData.size() / recordLimitComboBox.getValue()) - 1;&#10;        if (currentPage &lt; maxPage) {&#10;            currentPage++;&#10;            updateTableView();&#10;        }&#10;    }&#10;&#10;    private void goToLastPage() {&#10;        int maxPage = (int) Math.ceil((double) masterData.size() / recordLimitComboBox.getValue()) - 1;&#10;        if (currentPage &lt; maxPage) {&#10;            currentPage = maxPage;&#10;            updateTableView();&#10;        }&#10;    }&#10;&#10;    private void updatePagination() {&#10;        currentPage = 0; // Reset to first page when changing records per page&#10;        updateTableView();&#10;    }&#10;&#10;    private void updateTableView() {&#10;        int fromIndex = currentPage * recordLimitComboBox.getValue();&#10;        int toIndex = Math.min(fromIndex + recordLimitComboBox.getValue(), masterData.size());&#10;&#10;        ObservableList&lt;Customer&gt; pageData = FXCollections.observableArrayList(&#10;            masterData.subList(fromIndex, toIndex)&#10;        );&#10;        tableView.setItems(pageData);&#10;&#10;        // Update page number label&#10;        int totalPages = (int) Math.ceil((double) masterData.size() / recordLimitComboBox.getValue());&#10;        pageNumberLabel.setText(String.format(&quot;Page %d of %d&quot;, currentPage + 1, totalPages));&#10;&#10;        // Update navigation buttons state&#10;        updateNavigationButtons(totalPages);&#10;&#10;        updateStatus();&#10;    }&#10;&#10;    private void updateNavigationButtons(int totalPages) {&#10;        firstPageButton.setDisable(currentPage == 0);&#10;        prevPageButton.setDisable(currentPage == 0);&#10;        nextPageButton.setDisable(currentPage &gt;= totalPages - 1);&#10;        lastPageButton.setDisable(currentPage &gt;= totalPages - 1);&#10;    }&#10;&#10;    private void refreshData() {&#10;        try {&#10;            masterData = customerService.getAllCustomers();&#10;            updatePagination();&#10;        } catch (SQLException e) {&#10;            showError(&quot;Error loading data&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void updateStatus() {&#10;        try {&#10;            boolean connected = DatabaseConfig.getInstance().testConnection();&#10;            statusLabel.setText(&quot;Database Status: &quot; + (connected ? &quot;Connected&quot; : &quot;Disconnected&quot;));&#10;            statusLabel.getStyleClass().add(connected ? &quot;connected&quot; : &quot;disconnected&quot;);&#10;&#10;            int total = customerService.getTotalCustomers();&#10;            totalRecordsLabel.setText(&quot;Total Records: &quot; + total);&#10;        } catch (SQLException e) {&#10;            statusLabel.setText(&quot;Database Status: Error&quot;);&#10;            statusLabel.getStyleClass().add(&quot;disconnected&quot;);&#10;        }&#10;    }&#10;&#10;    private void showError(String title, String header, String message) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(title);&#10;        alert.setHeaderText(header);&#10;        alert.setContentText(message);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void showError(String title, String message) {&#10;        showError(title, null, message);&#10;    }&#10;&#10;    private void deleteCustomer() {&#10;        Customer selected = tableView.getSelectionModel().getSelectedItem();&#10;        if (selected == null) {&#10;            showError(&quot;Error&quot;, &quot;Please select a customer to delete&quot;);&#10;            return;&#10;        }&#10;&#10;        Alert confirmation = new Alert(Alert.AlertType.CONFIRMATION);&#10;        confirmation.setTitle(&quot;Confirm Delete&quot;);&#10;        confirmation.setHeaderText(null);&#10;        confirmation.setContentText(&quot;Are you sure you want to delete this customer?&quot;);&#10;&#10;        if (confirmation.showAndWait().orElse(ButtonType.CANCEL) == ButtonType.OK) {&#10;            try {&#10;                customerService.deleteCustomer(selected.getIdx());&#10;                refreshData();&#10;            } catch (SQLException e) {&#10;                showError(&quot;Error deleting customer&quot;, e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private String getDownloadsPath() {&#10;        return System.getProperty(&quot;user.home&quot;) + &quot;/Downloads&quot;;&#10;    }&#10;&#10;    private void exportToPdf() {&#10;        // Get the current items shown in the table view (filtered by search)&#10;        List&lt;Customer&gt; customers = tableView.getItems();&#10;&#10;        if (customers.isEmpty()) {&#10;            showError(&quot;Export Error&quot;, &quot;No data to export. The search results are empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        String fileName = &quot;customers_export_&quot; + LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyyMMdd_HHmmss&quot;)) + &quot;.pdf&quot;;&#10;        String path = getDownloadsPath() + &quot;/&quot; + fileName;&#10;&#10;        Task&lt;Void&gt; task = new ExportService().exportToPdf(customers, path);&#10;&#10;        ProgressDialog progressDialog = new ProgressDialog(task);&#10;        progressDialog.setTitle(&quot;Export Progress&quot;);&#10;        progressDialog.setHeaderText(null);&#10;        progressDialog.setContentText(&quot;Exporting searched data to PDF...&quot;);&#10;&#10;        task.setOnSucceeded(e -&gt; {&#10;            progressDialog.close();&#10;            Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;            alert.setTitle(&quot;Export Complete&quot;);&#10;            alert.setHeaderText(null);&#10;            alert.setContentText(&quot;Export completed successfully!\nFile saved in Downloads folder as: &quot; + fileName);&#10;            alert.showAndWait();&#10;        });&#10;&#10;        task.setOnFailed(e -&gt; {&#10;            progressDialog.close();&#10;            showError(&quot;Export Error&quot;, task.getException().getMessage());&#10;        });&#10;&#10;        new Thread(task).start();&#10;    }&#10;&#10;    private void exportToExcel() {&#10;        // Get the current items shown in the table view (filtered by search)&#10;        List&lt;Customer&gt; customers = tableView.getItems();&#10;        &#10;        if (customers.isEmpty()) {&#10;            showError(&quot;Export Error&quot;, &quot;No data to export. The search results are empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        String fileName = &quot;customers_export_&quot; + LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyyMMdd_HHmmss&quot;)) + &quot;.xlsx&quot;;&#10;        String path = getDownloadsPath() + &quot;/&quot; + fileName;&#10;&#10;        Task&lt;Void&gt; task = new ExportService().exportToExcel(customers, path);&#10;&#10;        ProgressDialog progressDialog = new ProgressDialog(task);&#10;        progressDialog.setTitle(&quot;Export Progress&quot;);&#10;        progressDialog.setHeaderText(null);&#10;        progressDialog.setContentText(&quot;Exporting searched data to Excel...&quot;);&#10;&#10;        task.setOnSucceeded(e -&gt; {&#10;            progressDialog.close();&#10;            Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;            alert.setTitle(&quot;Export Complete&quot;);&#10;            alert.setHeaderText(null);&#10;            alert.setContentText(&quot;Export completed successfully!\nFile saved in Downloads folder as: &quot; + fileName);&#10;            alert.showAndWait();&#10;        });&#10;&#10;        task.setOnFailed(e -&gt; {&#10;            progressDialog.close();&#10;            showError(&quot;Export Error&quot;, task.getException().getMessage());&#10;        });&#10;&#10;        new Thread(task).start();&#10;    }&#10;&#10;    private void exportToCsv() {&#10;        // Get the current items shown in the table view (filtered by search)&#10;        List&lt;Customer&gt; customers = tableView.getItems();&#10;&#10;        if (customers.isEmpty()) {&#10;            showError(&quot;Export Error&quot;, &quot;No data to export. The search results are empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        String fileName = &quot;customers_export_&quot; + LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyyMMdd_HHmmss&quot;)) + &quot;.csv&quot;;&#10;        String path = getDownloadsPath() + &quot;/&quot; + fileName;&#10;&#10;        Task&lt;Void&gt; task = new ExportService().exportToCsv(customers, path);&#10;&#10;        ProgressDialog progressDialog = new ProgressDialog(task);&#10;        progressDialog.setTitle(&quot;Export Progress&quot;);&#10;        progressDialog.setHeaderText(null);&#10;        progressDialog.setContentText(&quot;Exporting searched data to CSV...&quot;);&#10;&#10;        task.setOnSucceeded(e -&gt; {&#10;            progressDialog.close();&#10;            Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;            alert.setTitle(&quot;Export Complete&quot;);&#10;            alert.setHeaderText(null);&#10;            alert.setContentText(&quot;Export completed successfully!\nFile saved in Downloads folder as: &quot; + fileName);&#10;            alert.showAndWait();&#10;        });&#10;&#10;        task.setOnFailed(e -&gt; {&#10;            progressDialog.close();&#10;            showError(&quot;Export Error&quot;, task.getException().getMessage());&#10;        });&#10;&#10;        new Thread(task).start();&#10;    }&#10;&#10;&#10;    private void showAddEditDialog(Customer customer) {&#10;        CustomerDialog dialog = new CustomerDialog(customer);&#10;        dialog.showAndWait().ifPresent(result -&gt; {&#10;            try {&#10;                if (customer == null) {&#10;                    customerService.saveCustomer(result);&#10;                } else {&#10;                    customerService.updateCustomer(result);&#10;                }&#10;                refreshData();&#10;            } catch (SQLException e) {&#10;                showError(&quot;Error saving customer&quot;, e.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showAddCustomerDialog() {&#10;        showAddEditDialog(null);&#10;    }&#10;&#10;    private void setupKeyboardShortcuts(Scene scene) {&#10;        scene.setOnKeyPressed(e -&gt; {&#10;            if (e.isControlDown()) {&#10;                switch (e.getCode()) {&#10;                    case N -&gt; showAddCustomerDialog();&#10;                    case R -&gt; refreshData();&#10;                    case F -&gt; tableView.requestFocus();&#10;                    case DELETE -&gt; deleteCustomer();&#10;                    default -&gt; {}&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showKeyboardShortcuts() {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(&quot;Keyboard Shortcuts&quot;);&#10;        alert.setHeaderText(&quot;Available Keyboard Shortcuts&quot;);&#10;        alert.setContentText(&quot;&quot;&quot;&#10;            Data Management:&#10;            Ctrl+N: Add new customer&#10;            Ctrl+E: Edit selected customer&#10;            Delete: Delete selected customer&#10;            Ctrl+R: Refresh data&#10;            &#10;            View &amp; Search:&#10;            Ctrl+F: Focus search box&#10;            Enter: Trigger search&#10;            &#10;            Export:&#10;            Ctrl+P: Export to PDF&#10;            Ctrl+S: Export to CSV&#10;            Ctrl+Shift+E: Export to Excel&#10;            &#10;            General:&#10;            F1: Show this help&#10;            Esc: Close dialogs&#10;            &quot;&quot;&quot;);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void showAboutDialog() {&#10;        Alert about = new Alert(Alert.AlertType.INFORMATION);&#10;        about.setTitle(&quot;About Customer Management System&quot;);&#10;        about.setHeaderText(&quot;Customer Management System&quot;);&#10;        about.setContentText(&quot;&quot;&quot;&#10;            Version 1.0&#10;            Built with JavaFX 21&#10;            &#10;            A modern desktop application for managing customer data&#10;            with support for various data formats and reporting.&quot;&quot;&quot;);&#10;        about.showAndWait();&#10;    }&#10;&#10;    private void filterActiveCustomers() {&#10;        try {&#10;            ObservableList&lt;Customer&gt; customers = customerService.getAllCustomers();&#10;            masterData = FXCollections.observableArrayList(&#10;                customers.filtered(Customer::isActive)&#10;            );&#10;            updatePagination();&#10;        } catch (SQLException e) {&#10;            showError(&quot;Error loading data&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void filterInactiveCustomers() {&#10;        try {&#10;            ObservableList&lt;Customer&gt; customers = customerService.getAllCustomers();&#10;            masterData = FXCollections.observableArrayList(&#10;                customers.filtered(customer -&gt; !customer.isActive())&#10;            );&#10;            updatePagination();&#10;        } catch (SQLException e) {&#10;            showError(&quot;Error loading data&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void handleImportCSV() {&#10;        FileChooser fileChooser = new FileChooser();&#10;        fileChooser.setTitle(&quot;Select CSV File&quot;);&#10;        fileChooser.getExtensionFilters().add(&#10;            new FileChooser.ExtensionFilter(&quot;CSV Files&quot;, &quot;*.csv&quot;)&#10;        );&#10;&#10;        File file = fileChooser.showOpenDialog(primaryStage);&#10;        if (file != null) {&#10;            ImportService importService = new ImportService(customerService.getCustomerDAO());&#10;            Task&lt;ImportService.ImportResult&gt; task = new Task&lt;&gt;() {&#10;                @Override&#10;                protected ImportService.ImportResult call() throws Exception {&#10;                    return importService.importFromCSV(file, progress -&gt; {&#10;                        updateProgress(progress * 100, 100);&#10;                        updateMessage(String.format(&quot;Importing... %.0f%%&quot;, progress * 100));&#10;                    });&#10;                }&#10;            };&#10;&#10;            ProgressDialog progressDialog = new ProgressDialog(task);&#10;            progressDialog.setTitle(&quot;Importing CSV&quot;);&#10;            progressDialog.initOwner(primaryStage);&#10;&#10;            task.setOnSucceeded(event -&gt; {&#10;                ImportService.ImportResult result = task.getValue();&#10;                Platform.runLater(() -&gt; {&#10;                    try {&#10;                        progressDialog.cleanup();&#10;                        progressDialog.hide();&#10;&#10;                        if (!result.getSuccessfulImports().isEmpty()) {&#10;                            importService.saveImportedCustomers(result.getSuccessfulImports());&#10;                        }&#10;&#10;                        // Show confirmation dialog&#10;                        Alert alert = new Alert(&#10;                            result.getFailures().isEmpty() ? Alert.AlertType.INFORMATION : Alert.AlertType.WARNING&#10;                        );&#10;                        alert.setTitle(&quot;Import Result&quot;);&#10;                        alert.setHeaderText(null);&#10;&#10;                        StringBuilder message = new StringBuilder();&#10;                        message.append(&quot;Import completed!\n\n&quot;);&#10;                        message.append(String.format(&quot;Total rows processed: %d\n&quot;, result.getTotalRows()));&#10;                        message.append(String.format(&quot;Successfully imported: %d\n&quot;, result.getSuccessfulImports().size()));&#10;                        message.append(String.format(&quot;Failed to import: %d\n&quot;, result.getFailures().size()));&#10;&#10;                        if (!result.getFailures().isEmpty()) {&#10;                            message.append(&quot;\nFailed rows:\n&quot;);&#10;                            result.getFailures().forEach((row, error) -&gt;&#10;                                message.append(String.format(&quot;Row %d: %s\n&quot;, row, error)));&#10;                        }&#10;&#10;                        // Use TextArea for long messages&#10;                        if (message.length() &gt; 200) {&#10;                            TextArea textArea = new TextArea(message.toString());&#10;                            textArea.setEditable(false);&#10;                            textArea.setWrapText(true);&#10;                            textArea.setMaxWidth(Double.MAX_VALUE);&#10;                            textArea.setMaxHeight(Double.MAX_VALUE);&#10;                            alert.getDialogPane().setContent(textArea);&#10;                        } else {&#10;                            alert.setContentText(message.toString());&#10;                        }&#10;&#10;                        alert.showAndWait();&#10;                        refreshData();&#10;                    } catch (SQLException e) {&#10;                        showError(&quot;Import Error&quot;, &quot;Failed to save imported data: &quot; + e.getMessage());&#10;                    }&#10;                });&#10;            });&#10;&#10;            task.setOnFailed(event -&gt; {&#10;                Platform.runLater(() -&gt; {&#10;                    progressDialog.cleanup();&#10;                    progressDialog.hide();&#10;                    showError(&quot;Import Error&quot;, &quot;Failed to import CSV file&quot;, task.getException().getMessage());&#10;                });&#10;            });&#10;&#10;            Thread importThread = new Thread(task);&#10;            importThread.setDaemon(true);&#10;            importThread.start();&#10;            progressDialog.show();&#10;        }&#10;    }&#10;&#10;    private void handleImportExcel() {&#10;        FileChooser fileChooser = new FileChooser();&#10;        fileChooser.setTitle(&quot;Select Excel File&quot;);&#10;        fileChooser.getExtensionFilters().addAll(&#10;            new FileChooser.ExtensionFilter(&quot;Excel Files&quot;, &quot;*.xlsx&quot;, &quot;*.xls&quot;)&#10;        );&#10;&#10;        File file = fileChooser.showOpenDialog(primaryStage);&#10;        if (file != null) {&#10;            ImportService importService = new ImportService(customerService.getCustomerDAO());&#10;            Task&lt;ImportService.ImportResult&gt; task = new Task&lt;&gt;() {&#10;                @Override&#10;                protected ImportService.ImportResult call() throws Exception {&#10;                    updateProgress(0, 100);&#10;                    updateMessage(&quot;Importing Excel file...&quot;);&#10;                    return importService.importFromExcel(file);&#10;                }&#10;            };&#10;&#10;            ProgressDialog progressDialog = new ProgressDialog(task);&#10;            progressDialog.setTitle(&quot;Importing Excel&quot;);&#10;            progressDialog.initOwner(primaryStage);&#10;&#10;            task.setOnSucceeded(event -&gt; {&#10;                ImportService.ImportResult result = task.getValue();&#10;                Platform.runLater(() -&gt; {&#10;                    try {&#10;                        progressDialog.close();&#10;&#10;                        if (!result.getSuccessfulImports().isEmpty()) {&#10;                            importService.saveImportedCustomers(result.getSuccessfulImports());&#10;                        }&#10;                        showImportResult(result);&#10;                        refreshData();&#10;                    } catch (SQLException e) {&#10;                        showError(&quot;Import Error&quot;, &quot;Failed to save imported data: &quot; + e.getMessage());&#10;                    }&#10;                });&#10;            });&#10;&#10;            task.setOnFailed(event -&gt; {&#10;                Platform.runLater(() -&gt; {&#10;                    progressDialog.close();&#10;                    showError(&quot;Import Error&quot;, &quot;Failed to import Excel file&quot;, task.getException().getMessage());&#10;                });&#10;            });&#10;&#10;            Thread importThread = new Thread(task);&#10;            importThread.setDaemon(true);&#10;            importThread.start();&#10;            progressDialog.show();&#10;        }&#10;    }&#10;&#10;    private void showImportResult(ImportService.ImportResult result) {&#10;        int successCount = result.getSuccessfulImports().size();&#10;        int failureCount = result.getFailures().size();&#10;&#10;        StringBuilder message = new StringBuilder();&#10;        message.append(String.format(&quot;Total rows processed: %d\n&quot;, result.getTotalRows()));&#10;        message.append(String.format(&quot;Successfully imported: %d\n&quot;, successCount));&#10;        message.append(String.format(&quot;Failed to import: %d\n\n&quot;, failureCount));&#10;&#10;        if (failureCount &gt; 0) {&#10;            message.append(&quot;Failed rows details:\n&quot;);&#10;            result.getFailures().forEach((row, error) -&gt;&#10;                message.append(String.format(&quot;Row %d: %s\n&quot;, row, error)));&#10;        }&#10;&#10;        Alert alert = new Alert(failureCount &gt; 0 ? Alert.AlertType.WARNING : Alert.AlertType.INFORMATION);&#10;        alert.setTitle(&quot;Import Result&quot;);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(message.toString());&#10;&#10;        // If the message is too long, show it in a scrollable text area&#10;        if (message.length() &gt; 200) {&#10;            TextArea textArea = new TextArea(message.toString());&#10;            textArea.setEditable(false);&#10;            textArea.setWrapText(true);&#10;            textArea.setMaxHeight(400);&#10;            textArea.setMaxWidth(500);&#10;&#10;            alert.getDialogPane().setContent(textArea);&#10;        }&#10;&#10;        alert.showAndWait();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        launch(args);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/tama/customer/view/DatabaseConnectionView.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/tama/customer/view/DatabaseConnectionView.java" />
              <option name="originalContent" value="package com.tama.customer.view;&#10;&#10;import com.tama.customer.config.DatabaseConfig;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.stage.Stage;&#10;&#10;public class DatabaseConnectionView extends Dialog&lt;Boolean&gt; {&#10;    private final TextField serverField = new TextField(&quot;localhost&quot;);&#10;    private final TextField databaseField = new TextField();&#10;    private final TextField portField = new TextField(&quot;3306&quot;);&#10;    private final TextField userField = new TextField(&quot;root&quot;);&#10;    private final PasswordField passwordField = new PasswordField();&#10;&#10;    public DatabaseConnectionView(Stage owner) {&#10;        setTitle(&quot;Database Connection&quot;);&#10;        setHeaderText(&quot;Please enter database connection details&quot;);&#10;&#10;        // Create the content&#10;        GridPane grid = new GridPane();&#10;        grid.setHgap(10);&#10;        grid.setVgap(10);&#10;        grid.setPadding(new Insets(20, 150, 10, 10));&#10;&#10;        grid.add(new Label(&quot;Server:&quot;), 0, 0);&#10;        grid.add(serverField, 1, 0);&#10;        grid.add(new Label(&quot;Database:&quot;), 0, 1);&#10;        grid.add(databaseField, 1, 1);&#10;        grid.add(new Label(&quot;Port:&quot;), 0, 2);&#10;        grid.add(portField, 1, 2);&#10;        grid.add(new Label(&quot;Username:&quot;), 0, 3);&#10;        grid.add(userField, 1, 3);&#10;        grid.add(new Label(&quot;Password:&quot;), 0, 4);&#10;        grid.add(passwordField, 1, 4);&#10;&#10;        getDialogPane().setContent(grid);&#10;&#10;        ButtonType connectButtonType = new ButtonType(&quot;Connect&quot;, ButtonBar.ButtonData.OK_DONE);&#10;        getDialogPane().getButtonTypes().addAll(connectButtonType, ButtonType.CANCEL);&#10;&#10;        // Set the dialog result converter&#10;        setResultConverter(dialogButton -&gt; {&#10;            if (dialogButton == connectButtonType) {&#10;                try {&#10;                    DatabaseConfig config = DatabaseConfig.getInstance();&#10;                    config.configure(&#10;                        serverField.getText(),&#10;                        databaseField.getText(),&#10;                        Integer.parseInt(portField.getText()),&#10;                        userField.getText(),&#10;                        passwordField.getText()&#10;                    );&#10;                    return config.testConnection();&#10;                } catch (Exception e) {&#10;                    Alert alert = new Alert(Alert.AlertType.ERROR);&#10;                    alert.setTitle(&quot;Connection Error&quot;);&#10;                    alert.setContentText(&quot;Failed to connect to database: &quot; + e.getMessage());&#10;                    alert.showAndWait();&#10;                    return false;&#10;                }&#10;            }&#10;            return false;&#10;        });&#10;&#10;        // Enable/disable connect button based on field values&#10;        Button connectButton = (Button) getDialogPane().lookupButton(connectButtonType);&#10;        connectButton.setDisable(true);&#10;&#10;        // Add validation&#10;        databaseField.textProperty().addListener((obs, oldVal, newVal) -&gt;&#10;            connectButton.setDisable(newVal.trim().isEmpty()));&#10;&#10;        // Optional: set owner after dialog is fully configured&#10;        if (owner != null) {&#10;            initOwner(owner);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.tama.customer.view;&#10;&#10;import com.tama.customer.config.DatabaseConfig;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.stage.Stage;&#10;&#10;public class DatabaseConnectionView extends Dialog&lt;Boolean&gt; {&#10;    private final TextField serverField = new TextField(&quot;localhost&quot;);&#10;    private final TextField databaseField = new TextField();&#10;    private final TextField portField = new TextField(&quot;3306&quot;);&#10;    private final TextField userField = new TextField(&quot;root&quot;);&#10;    private final PasswordField passwordField = new PasswordField();&#10;&#10;    public DatabaseConnectionView(Stage owner) {&#10;        setTitle(&quot;Database Connection&quot;);&#10;        setHeaderText(&quot;Please enter database connection details&quot;);&#10;&#10;        // Create the content&#10;        GridPane grid = new GridPane();&#10;        grid.setHgap(10);&#10;        grid.setVgap(10);&#10;        grid.setPadding(new Insets(20));&#10;&#10;        // Set minimum widths for consistent layout&#10;        serverField.setMinWidth(200);&#10;        databaseField.setMinWidth(200);&#10;        portField.setMinWidth(200);&#10;        userField.setMinWidth(200);&#10;        passwordField.setMinWidth(200);&#10;&#10;        // Add form fields&#10;        int row = 0;&#10;        grid.add(new Label(&quot;Server:&quot;), 0, row);&#10;        grid.add(serverField, 1, row++);&#10;&#10;        grid.add(new Label(&quot;Database:&quot;), 0, row);&#10;        grid.add(databaseField, 1, row++);&#10;&#10;        grid.add(new Label(&quot;Port:&quot;), 0, row);&#10;        grid.add(portField, 1, row++);&#10;&#10;        grid.add(new Label(&quot;Username:&quot;), 0, row);&#10;        grid.add(userField, 1, row++);&#10;&#10;        grid.add(new Label(&quot;Password:&quot;), 0, row);&#10;        grid.add(passwordField, 1, row);&#10;&#10;        getDialogPane().setContent(grid);&#10;&#10;        ButtonType connectButtonType = new ButtonType(&quot;Connect&quot;, ButtonBar.ButtonData.OK_DONE);&#10;        getDialogPane().getButtonTypes().addAll(connectButtonType, ButtonType.CANCEL);&#10;&#10;        // Set the dialog result converter&#10;        setResultConverter(dialogButton -&gt; {&#10;            if (dialogButton == connectButtonType) {&#10;                try {&#10;                    DatabaseConfig config = DatabaseConfig.getInstance();&#10;                    config.configure(&#10;                        serverField.getText(),&#10;                        databaseField.getText(),&#10;                        Integer.parseInt(portField.getText()),&#10;                        userField.getText(),&#10;                        passwordField.getText()&#10;                    );&#10;                    return config.testConnection();&#10;                } catch (Exception e) {&#10;                    Alert alert = new Alert(Alert.AlertType.ERROR);&#10;                    alert.setTitle(&quot;Connection Error&quot;);&#10;                    alert.setContentText(&quot;Failed to connect to database: &quot; + e.getMessage());&#10;                    alert.showAndWait();&#10;                    return false;&#10;                }&#10;            }&#10;            return false;&#10;        });&#10;&#10;        // Enable/disable connect button based on field values&#10;        Button connectButton = (Button) getDialogPane().lookupButton(connectButtonType);&#10;        connectButton.setDisable(true);&#10;&#10;        // Add validation&#10;        databaseField.textProperty().addListener((obs, oldVal, newVal) -&gt;&#10;            connectButton.setDisable(newVal.trim().isEmpty()));&#10;&#10;        // Set owner and center the dialog&#10;        if (owner != null) {&#10;            initOwner(owner);&#10;            // Center on screen&#10;            setX(owner.getX() + (owner.getWidth() - getWidth()) / 2);&#10;            setY(owner.getY() + (owner.getHeight() - getHeight()) / 2);&#10;        } else {&#10;            // If no owner, center on screen&#10;            setOnShowing(event -&gt; {&#10;                Stage stage = (Stage) getDialogPane().getScene().getWindow();&#10;                stage.centerOnScreen();&#10;            });&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>